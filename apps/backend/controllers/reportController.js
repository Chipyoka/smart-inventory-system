const PDFDocument = require('pdfkit');
const db = require('../config/db');
const fs = require('fs');
const path = require('path');

exports.generateInventoryReport = async (req, res) => {
  try {
    // === 1. FETCH DATA ===
    const [summaryRows] = await db.query(`
      SELECT COUNT(*) AS total_products, 
             SUM(stock) AS total_stock,
             SUM(stock * selling_price) AS inventory_value 
      FROM items
    `);
    const summary = summaryRows[0];

    const [[categoryCount]] = await db.query(`SELECT COUNT(*) AS count FROM categories`);
    const [[supplierCount]] = await db.query(`SELECT COUNT(*) AS count FROM suppliers`);

    const [items] = await db.query(`
      SELECT i.name, c.name AS category, i.stock, i.quality, i.selling_price, 
             s.name AS supplier, i.expiry_date, i.location, i.barcode
      FROM items i
      JOIN suppliers s ON i.supplier_id = s.supplier_id
      JOIN categories c ON i.category_id = c.category_id
    `);

    const [lowStock] = await db.query(`SELECT name, stock FROM items WHERE stock < 10`);
    const [expired] = await db.query(`SELECT name, expiry_date FROM items WHERE expiry_date < CURDATE()`);

    const [mostDemanded] = await db.query(`
      SELECT i.name AS product, COUNT(s.sale_id) AS count, c.name AS category, sup.name AS supplier
      FROM sales s
      JOIN items i ON s.item_id = i.product_id
      JOIN categories c ON i.category_id = c.category_id
      JOIN suppliers sup ON i.supplier_id = sup.supplier_id
      GROUP BY i.product_id
      ORDER BY count DESC
      LIMIT 10
    `);

    const [auditLogs] = await db.query(`
      SELECT a.action_timestamp AS timestamp, a.action_type, u.username, i.name AS item_name, a.name AS audit_name, a.barcode, a.stock, a.location
      FROM audit_logs a
      LEFT JOIN users u ON a.user_id = u.id
      LEFT JOIN items i ON a.product_id = i.product_id
      ORDER BY a.action_timestamp DESC
      LIMIT 10
    `);

    const [suppliers] = await db.query(`
      SELECT s.name, COUNT(i.product_id) AS total_supplied, MAX(i.created_at) AS last_delivery
      FROM suppliers s
      LEFT JOIN items i ON s.supplier_id = i.supplier_id
      GROUP BY s.supplier_id
    `);

    // === 2. SETUP PDF DOCUMENT ===
    const doc = new PDFDocument({ margin: 40, size: 'A4' });
    res.setHeader('Content-Disposition', 'attachment; filename=Inventory_Report.pdf');
    res.setHeader('Content-Type', 'application/pdf');
    doc.pipe(res);

    // === 3. LOGO & HEADER ===
    const logoPath = path.join(__dirname, '../assets/logo.png');
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, doc.page.width / 2 - 40, 30, { width: 80 });
    }

    doc.moveDown(4);
    doc
      .fontSize(20).fillColor('#000').text('Smart Inventory Management System', { align: 'center' })
      .fontSize(16).text('Inventory Summary Report', { align: 'center' })
      .moveDown()
      .fontSize(10)
      .text(`Generated By: ${req.user?.username || 'System'}`, { align: 'center' })
      .text(`Date: ${new Date().toLocaleString()}`, { align: 'center' });

    doc.moveDown(2);

    // === Divider ===
    const addDivider = () => {
      doc.moveDown(0.5)
        .strokeColor('#aaa')
        .lineWidth(1)
        .moveTo(doc.page.margins.left, doc.y)
        .lineTo(doc.page.width - doc.page.margins.right, doc.y)
        .stroke()
        .moveDown(0.8);
    };

    // === 4. INVENTORY OVERVIEW ===
    doc.fontSize(14).fillColor('#1a237e').text('1. Inventory Overview', { underline: true }).moveDown(0.5);
    const inventoryValue = parseFloat(summary.inventory_value) || 0;
    doc.fontSize(11).fillColor('#000')
      .text(`• Total Products: ${summary.total_products}`)
      .text(`• Total Stock: ${summary.total_stock}`)
      .text(`• Inventory Value: $${inventoryValue.toFixed(2)}`)
      .text(`• Category Count: ${categoryCount.count}`)
      .text(`• Supplier Count: ${supplierCount.count}`);
    addDivider();

    // === 5. STOCKED PRODUCTS TABLE ===
    doc.fontSize(14).fillColor('#1a237e').text('2. Stocked Products', { underline: true }).moveDown(0.5);
    const productTableHeaders = ['Name', 'Category', 'Stock', 'Quality', 'Price', 'Supplier', 'Expiry', 'Location', 'Barcode'];
    doc.fontSize(10).fillColor('#000').text(productTableHeaders.join(' | '), { underline: true });
    items.forEach(item => {
      const price = parseFloat(item.selling_price) || 0;
      const line = [
        item.name, item.category, item.stock, item.quality,
        `$${price.toFixed(2)}`,
        item.supplier,
        item.expiry_date ? new Date(item.expiry_date).toISOString().split('T')[0] : 'N/A',
        item.location,
        item.barcode
      ];
      doc.text(line.join(' | '));
    });
    addDivider();

    // === 6. LOW STOCK ===
    doc.fontSize(14).fillColor('#1a237e').text('3. Low Stock Items', { underline: true }).moveDown(0.5);
    if (lowStock.length === 0) {
      doc.fontSize(10).fillColor('#555').text('No items are currently low in stock.');
    } else {
      lowStock.forEach((item, i) => {
        doc.fontSize(10).fillColor('#000').text(`${i + 1}. ${item.name} | Stock: ${item.stock}`);
      });
    }
    addDivider();

    // === 7. EXPIRED ITEMS ===
    doc.fontSize(14).fillColor('#1a237e').text('4. Expired Items', { underline: true }).moveDown(0.5);
    if (expired.length === 0) {
      doc.fontSize(10).fillColor('#555').text('No expired items found.');
    } else {
      expired.forEach((item, i) => {
        const exp = item.expiry_date ? new Date(item.expiry_date).toISOString().split('T')[0] : 'N/A';
        doc.fontSize(10).fillColor('#000').text(`${i + 1}. ${item.name} | Expiry: ${exp}`);
      });
    }
    addDivider();

    // === 8. MOST DEMANDED ===
    doc.fontSize(14).fillColor('#1a237e').text('5. Most In-Demand Products', { underline: true }).moveDown(0.5);
    const demandHeaders = ['Product', 'Sold', 'Category', 'Supplier'];
    doc.fontSize(10).fillColor('#000').text(demandHeaders.join(' | '), { underline: true });
    mostDemanded.forEach(item => {
      doc.text(`${item.product} | ${item.count} | ${item.category} | ${item.supplier}`);
    });
    addDivider();

    // === 9. AUDIT LOGS ===
    doc.addPage();
    doc.fontSize(14).fillColor('#1a237e').text('6. Recent Inventory Actions', { underline: true }).moveDown(0.5);
    const auditHeaders = ['Time', 'Action', 'User', 'Item', 'Note', 'Barcode', 'Stock', 'Location'];
    doc.fontSize(10).fillColor('#000').text(auditHeaders.join(' | '), { underline: true });
    auditLogs.forEach(log => {
      const timestamp = log.timestamp ? new Date(log.timestamp).toISOString().split('T')[0] : 'N/A';
      doc.text([
        timestamp,
        log.action_type,
        log.username || '',
        log.item_name || '',
        log.audit_name || '',
        log.barcode || '',
        log.stock || '',
        log.location || ''
      ].join(' | '));
    });
    addDivider();

    // === 10. SUPPLIER PERFORMANCE ===
    doc.fontSize(14).fillColor('#1a237e').text('7. Supplier Performance Overview', { underline: true }).moveDown(0.5);
    const supplierHeaders = ['Supplier', 'Total Supplied', 'Last Delivery'];
    doc.fontSize(10).fillColor('#000').text(supplierHeaders.join(' | '), { underline: true });
    suppliers.forEach(supplier => {
      const lastDelivery = supplier.last_delivery ? new Date(supplier.last_delivery).toISOString().split('T')[0] : 'N/A';
      doc.text(`${supplier.name} | ${supplier.total_supplied} | ${lastDelivery}`);
    });

    doc.end();

  } catch (err) {
    console.error('Report generation failed:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Report generation failed' });
    }
  }
};
